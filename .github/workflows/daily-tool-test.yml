name: Daily Tool Test Report

on:
  schedule:
    # Run daily at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:  # Allow manual trigger
    inputs:
      iterations:
        description: 'Number of test iterations per model'
        required: false
        default: '20'
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test-models:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run WatsonX Tool Tests
      env:
        WATSONX_APIKEY: ${{ secrets.WATSONX_APIKEY }}
        WATSONX_PROJECT_ID: ${{ secrets.WATSONX_PROJECT_ID }}
        WATSONX_TOOL_CLIENT: watsonx
        WATSONX_TOOL_ITERATIONS: ${{ inputs.iterations || '20' }}
        WATSONX_TOOL_DEBUG: 'false'
      run: |
        # Create reports directory if it doesn't exist
        mkdir -p reports
        mkdir -p reports/history
        
        # Generate timestamp for report filename
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        
        # Generate HTML report
        HTML_REPORT_FILE="reports/tool_test_report_${TIMESTAMP}.html"
        echo "üîß Running tool test with HTML output..."
        echo "Output file: $HTML_REPORT_FILE"
        
        if watsonx-tool-tester test --iterations ${{ inputs.iterations || '20' }} --output "$HTML_REPORT_FILE" --html-output --save-history; then
          echo "‚úÖ Tool test completed successfully"
        else
          echo "‚ùå Tool test failed with exit code $?"
          echo "Directory contents:"
          ls -la reports/
          exit 1
        fi
        
        # Copy the latest report (no symlinks for web compatibility)
        echo "üìã Copying report files..."
        if [ -f "$HTML_REPORT_FILE" ]; then
          cp "$HTML_REPORT_FILE" reports/latest_report.html
          echo "‚úÖ Report copied to latest_report.html"
        else
          echo "‚ùå ERROR: HTML report file not found: $HTML_REPORT_FILE"
          echo "Files in reports directory:"
          ls -la reports/
          exit 1
        fi
        
        # Verify the HTML report was created and contains content
        if [ -f reports/latest_report.html ] && [ -s reports/latest_report.html ]; then
          echo "‚úÖ Latest report created successfully: $(wc -c < reports/latest_report.html) bytes"
        else
          echo "‚ùå Failed to create latest report or file is empty"
        fi
        
        
        # Set environment variables for later steps
        echo "HTML_REPORT_FILE=$HTML_REPORT_FILE" >> $GITHUB_ENV
        echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

    - name: Upload Test Report as Artifact
      id: upload-report
      uses: actions/upload-artifact@v4
      with:
        name: tool-test-report-${{ env.TIMESTAMP }}
        path: reports/
        retention-days: 90

    - name: Clean up old reports and history
      if: steps.upload-report.outcome == 'success'
      run: |
        # Keep only the last 90 days of reports
        if [ -d "reports" ]; then
          cd reports
          # Find and remove files older than 90 days
          find . -name "tool_test_report_*.md" -type f -mtime +90 -delete
          find . -name "tool_test_report_*.html" -type f -mtime +90 -delete
          
          cd ..
          
          # Clean up old historical data (keep last 90 days)
          if command -v python3 &> /dev/null; then
            python3 -c "from watsonx_tool_tester.utils.history_manager import HistoryManager; hm = HistoryManager(); hm.cleanup_old_data(days_to_keep=90); print('Historical data cleanup completed')"
          else
            echo "Python3 not available, skipping historical data cleanup"
          fi
        fi

    - name: Commit and Push Report
      if: steps.upload-report.outcome == 'success'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the new report
        git add reports/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Add daily tool test report and cleanup old data - ${{ env.TIMESTAMP }}"
          git push
        fi

    - name: Update README with Latest Report Link
      if: steps.upload-report.outcome == 'success'
      run: |
        # Update README.md to include link to latest report using comment markers
        CURRENT_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        # Update README section in-place to preserve positioning
        if grep -q "<!-- TOOL_TEST_REPORT_START -->" README.md; then
          # Create temporary file with new section content using echo
          echo "<!-- TOOL_TEST_REPORT_START -->" > /tmp/new_section.txt
          echo "## üîß Tool Test Status" >> /tmp/new_section.txt
          echo "" >> /tmp/new_section.txt
          echo "üìä **[Latest Tool Test Report](https://daniel-butler-irl.github.io/watsonx_model_tool_test/reports/latest_report.html)**" >> /tmp/new_section.txt
          echo "" >> /tmp/new_section.txt
          echo "- **Last Updated:** $CURRENT_DATE" >> /tmp/new_section.txt
          echo "- **Test Iterations:** ${{ inputs.iterations || '20' }} per model" >> /tmp/new_section.txt
          echo "- **All Reports:** [Browse Reports Directory](https://daniel-butler-irl.github.io/watsonx_model_tool_test/reports/)" >> /tmp/new_section.txt
          echo "" >> /tmp/new_section.txt
          echo "*Reports generated daily at 06:00 UTC and include 90-day trend analysis and reliability assessment.*" >> /tmp/new_section.txt
          echo "<!-- TOOL_TEST_REPORT_END -->" >> /tmp/new_section.txt
          
          # Use awk to replace the section in-place
          awk '
            /<!-- TOOL_TEST_REPORT_START -->/ {
              while ((getline line < "/tmp/new_section.txt") > 0) {
                print line
              }
              close("/tmp/new_section.txt")
              skip = 1
              next
            }
            /<!-- TOOL_TEST_REPORT_END -->/ {
              skip = 0
              next
            }
            !skip
          ' README.md > README.md.tmp && mv README.md.tmp README.md
          
          # Clean up
          rm -f /tmp/new_section.txt
          
          echo "‚úÖ README section updated in-place"
        else
          # Add new section at the end if markers don't exist
          echo "" >> README.md
          echo "<!-- TOOL_TEST_REPORT_START -->" >> README.md
          echo "## üîß Tool Test Status" >> README.md
          echo "" >> README.md
          echo "üìä **[Latest Tool Test Report](https://daniel-butler-irl.github.io/watsonx_model_tool_test/reports/latest_report.html)**" >> README.md
          echo "" >> README.md
          echo "- **Last Updated:** $CURRENT_DATE" >> README.md
          echo "- **Test Iterations:** ${{ inputs.iterations || '20' }} per model" >> README.md
          echo "- **All Reports:** [Browse Reports Directory](https://daniel-butler-irl.github.io/watsonx_model_tool_test/reports/)" >> README.md
          echo "" >> README.md
          echo "*Reports generated daily at 06:00 UTC and include 90-day trend analysis and reliability assessment.*" >> README.md
          echo "<!-- TOOL_TEST_REPORT_END -->" >> README.md
          
          echo "‚úÖ README section added (markers didn't exist)"
        fi

    - name: Commit README Update
      if: steps.upload-report.outcome == 'success'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add the updated README
        git add README.md
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No README changes to commit"
        else
          git commit -m "Update README with latest tool test report link - ${{ env.TIMESTAMP }}"
          git push
        fi

  deploy-to-pages:
    runs-on: ubuntu-latest
    needs: test-models
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Pull latest changes
      run: |
        git pull origin main

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: .

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

